""
"" Janus setup
""

" Define paths
if has('win32') || has('win64') || has('win32unix')
  let g:janus_path = expand("~/.vim/janus/vim")
  let g:janus_vim_path = expand("~/.vim/janus/vim")
else
  let g:janus_path = escape(fnamemodify(resolve(expand("<sfile>:p")), ":h"), ' ')
  let g:janus_vim_path = escape(fnamemodify(resolve(expand("<sfile>:p" . "vim")), ":h"), ' ')
endif
let g:janus_custom_path = expand("~/.janus")

" size of a hard tabstop
"set smartindent
set tabstop=2

" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=2
set smarttab

" size of an indent"
set shiftwidth=2
set noexpandtab

"""""""""""""""""""""""""""""START C and C++
""use C instead C++
"augroup project
  "autocmd!
  "autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
"augroup END
""make system config
"if !filereadable(expand("%:p:h")."/Makefile")
  "setlocal makeprg=gcc\ -lm\ -Wall\ -Wextra\ -o\ %<\ %
"endif
"make c/c++ c.vim
let  g:C_UseTool_cmake    = 'yes'
let  g:C_UseTool_doxygen = 'yes'
let g:C_MapLeader  = ','
"""""""""""""""""""""""""""""END C and C++

" Source janus's core
exe 'source ' . g:janus_vim_path . '/core/before/plugin/janus.vim'

" You should note that groups will be processed by Pathogen in reverse
" order they were added.
call janus#add_group("tools")
call janus#add_group("langs")
call janus#add_group("colors")

""
"" Customisations
""

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

"airline theme
let g:airline_theme='murmur'
let g:airline_powerline_fonts = 1

" Disable plugins prior to loading pathogen
exe 'source ' . g:janus_vim_path . '/core/plugins.vim'

""
"" Pathogen setup
""

" Load all groups, custom dir, and janus core
call janus#load_pathogen()

" .vimrc.after is loaded after the plugins have loaded
execute pathogen#infect()
syntax on
filetype plugin indent on
filetype plugin on

" give us 256 color schemes!
set term=screen-256color
se t_Co=256
let g:solarized_termcolors=256

" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

" Start vundle config
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/c-support
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" End vundle config

" give us nice EOL (end of line) characters
set list
"set listchars=tab:▸\ ,eol:¬

set runtimepath^=~/.vim/bundle/ctrlp.vim

"nerdtree close to open a file
let NERDTreeQuitOnOpen = 1

" Plugin
Plugin 'VundleVim/Vundle.vim'

Plugin 'mattn/emmet-vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'Shutnik/jshint2.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'ervandew/supertab'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
"Bundle 'edkolev/tmuxline.vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'pangloss/vim-javascript'
Plugin 'shime/vim-livedown'
Plugin 'plasticboy/vim-markdown'
Plugin 'wavded/vim-stylus'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-vinegar'

" Linter
set runtimepath+=~/.vim/bundle/jshint2.vim/
"""START color scheme selection
:colorscheme github
":colorscheme sprinkles

"colorate final line in screen
set colorcolumn=130

" Map
map <F7> mzgg=G`z
map <F8> <leader>cc
map <F9> <leader>cu
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>a
inoremap <F2> <C-O>za
nnoremap <F2> za
nnoremap <F3> zR
onoremap <F2> <C-C>za
vnoremap <F3> zf

"fold
set foldmethod=syntax
set nofoldenable
"set foldlevelstart=1

let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

"powerline font
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
